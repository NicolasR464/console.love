{"definition": {
    "openapi": "3.0.0",
    "info": {
      "title": "API Documentation",
      "version": "1.0.0"
    },
    "paths": {
      "/login": {
        "post": {
          "description": "Logs in a user",
          "responses": {
            "200": {
              "description": "User logged in successfully"
            },
            "400": {
              "description": "Error in login"
            }
          }
        }
      },
      "/address": {
        "get": {
          "description": "Gets an address by query",
          "parameters": [
            {
              "in": "query",
              "name": "query",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The address query"
            }
          ],
          "responses": {
            "200": {
              "description": "Address found"
            },
            "404": {
              "description": "Address not found"
            }
          }
        }
      },
      "/register": {
        "post": {
          "description": "Registers a new user",
          "responses": {
            "200": {
              "description": "User registered successfully"
            },
            "400": {
              "description": "Error in registration"
            }
          }
        }
      },
      "/reset-password": {
        "post": {
          "description": "Sends a password reset email",
          "responses": {
            "200": {
              "description": "Email sent successfully"
            }
          }
        }
      },
      "/quizz/{lang}": {
        "get": {
          "description": "Gets a random question in a specified language",
          "parameters": [
            {
              "in": "path",
              "name": "lang",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The language"
            }
          ],
          "responses": {
            "200": {
              "description": "Question found"
            },
            "404": {
              "description": "Question not found"
            }
          }
        },
        "post": {
          "description": "Checks if a user's answer is correct",
          "parameters": [
            {
              "in": "path",
              "name": "lang",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The language"
            }
          ],
          "requestBody": {
            "description": "User's answer",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAnswer"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Answer checked successfully"
            },
            "404": {
              "description": "Question not found"
            }
          }
        }
      },
      "/user/{id}": {
        "get": {
          "description": "Gets a specific user by ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The user ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User found"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "put": {
          "description": "Updates a specific user by ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The user ID"
            }
          ],
          "requestBody": {
            "description": "User data",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated successfully"
            },
            "400": {
              "description": "Error in updating user"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "delete": {
          "description": "Deletes a specific user by ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "The user ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User deleted successfully"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/reset-db": {
        "put": {
          "description": "Resets the user database",
          "responses": {
            "200": {
              "description": "User database reset successfully"
            },
            "500": {
              "description": "Error in resetting user database"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "UserAnswer": {
          "type": "object",
          "properties": {
            "question": {
              "type": "string"
            },
            "userAnswer": {
              "type": "string"
            }
          }
        },
        "UserData": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string",
              "minLength": 5
            }
          },
          "required": [
            "name",
            "email",
            "password"
          ]
        }
      }
    }
  }
}